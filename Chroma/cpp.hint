// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define CHROMA_COMPONENT(typeName, baseTypeName) public: using ClassName = typeName; using BaseClass = baseTypeName; typeName() = default; typeName(EntityID id) : baseTypeName(id) {} typeName(const typeName&) = default; virtual StringHash get_type() const override { return get_type_info_static()->get_type(); } virtual const std::string& get_type_name() const override { return get_type_info_static()->get_type_name(); } virtual const TypeInfo* get_type_info() const override { return get_type_info_static(); } virtual const size_t get_type_size() const override { return get_type_size_static(); } static StringHash get_type_static() { return get_type_info_static()->get_type(); } static const std::string& get_type_name_static() { return get_type_info_static()->get_type_name(); } static const TypeInfo* get_type_info_static () { static const TypeInfo typeInfoStatic(#typeName, baseTypeName::get_type_info_static()); return &typeInfoStatic; } static const size_t get_type_size_static() { return sizeof(#typeName); } static void create_reflection_model(); private: virtual void no_type_info() override {} public:
#define CHROMA_ABSTRACT_COMPONENT(typeName, baseTypeName) public: using ClassName = typeName; using BaseClass = baseTypeName; typeName() = default; typeName(EntityID id) : baseTypeName(id) {} typeName(const typeName&) = default; virtual StringHash get_type() const override { return get_type_info_static()->get_type(); } virtual const std::string& get_type_name() const override { return get_type_info_static()->get_type_name(); } virtual const TypeInfo* get_type_info() const override { return get_type_info_static(); } virtual const size_t get_type_size() const override { return get_type_size_static(); } static StringHash get_type_static() { return get_type_info_static()->get_type(); } static const std::string& get_type_name_static() { return get_type_info_static()->get_type_name(); } static const TypeInfo* get_type_info_static () { static const TypeInfo typeInfoStatic(#typeName, baseTypeName::get_type_info_static()); return &typeInfoStatic; } static const size_t get_type_size_static() { return sizeof(#typeName); } public:
