# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the workflow will run
on:
  push:
      branches:
        - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Install/Verify python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
          
      - name: Install python packages
        run: python -m pip install requests
          
          
          
      - name: Setup Vulkan
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install vulkan-sdk --version=1.2.182.0
        
          
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
        
          
      - name: Run bat script on PowerShell
        shell: pwsh
        run: |
          $Env:VULKAN_SDK = "C:/VulkanSDK/1.2.182.0"
          $Env:Path += ";C:/VulkanSDK/1.2.182.0/Bin"
          ./third_party/premake-core/bin/release/premake5.exe vs2019
        
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.3
        
      - name: Build Polychrome
        run: |
          $Env:VULKAN_SDK = "C:/VulkanSDK/1.2.182.0"
          $Env:Path += ";C:/VulkanSDK/1.2.182.0/Bin"
          msbuild .\Chroma.sln -p:Configuration=Dist -p:Platform=x64
          
      - name: Zip Build
        run: Compress-Archive -Path .\bin\Dist-windows-x86_64\Polychrome\* -DestinationPath .\Polychrome.zip
        
      - uses: paulhatch/semantic-version@v4.0.2
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}-alpha"
          # Named version, will be used as suffix for name version tag
          namespace: Polychrome
          # Indicate whether short tags like 'v1' should be supported. If false only full
          # tags like 'v1.0.0' will be recognized.
          short_tags: false
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: true
          
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ version_tag }}
          release_name: "Polychrome Editor ${version}"
          draft: false
          prerelease: false
          
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./Polychrome.zip 
          asset_name: Polychrome.zip
          asset_content_type: application/zip
        
        
