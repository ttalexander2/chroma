{
  "api/Chroma.Audio.html": {
    "href": "api/Chroma.Audio.html",
    "title": "Class Audio",
    "keywords": "Class Audio Audio management class. These set of functions wrap the internal engine audio api and the FMOD api. Inheritance System.Object Audio Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public static class Audio Methods GetEventParameter(String, String) Get a parameter value of an event. Declaration public static float GetEventParameter(string event_name, string parameter) Parameters Type Name Description System.String event_name Name/ID of the event. System.String parameter Name/ID of the parameter. Returns Type Description System.Single IsEventPlaying(String) Checks whether the event is currently playing. Declaration public static bool IsEventPlaying(string event_name) Parameters Type Name Description System.String event_name Name/ID of the event. Returns Type Description System.Boolean Playing status. PlayEvent(String) Plays an audio event. Declaration public static void PlayEvent(string event_name) Parameters Type Name Description System.String event_name Name/ID of the event. PlayEventIfStopped(String) Plays an audio event ONLY if it is not playing. This function can be used if the playing state of the event us unknown. Declaration public static void PlayEventIfStopped(string event_name) Parameters Type Name Description System.String event_name Name/ID of the event. SetEventParameter(String, String, Single) Set a parameter value of an event. Declaration public static void SetEventParameter(string event_name, string parameter, float value) Parameters Type Name Description System.String event_name Name/ID of the event. System.String parameter Name/ID of the parameter to set. System.Single value Value to set the parameter StopEvent(String, Boolean) Stops an audio event from playing. Declaration public static void StopEvent(string event_name, bool immediate = false) Parameters Type Name Description System.String event_name Name/ID of the event. System.Boolean immediate Whether the event should stop immediately. If not, the event will follow any ending/fading behavior specified."
  },
  "api/Chroma.AudioSource.html": {
    "href": "api/Chroma.AudioSource.html",
    "title": "Class AudioSource",
    "keywords": "Class AudioSource Component to attach a spacial audio source to an entity. Inheritance System.Object Component AudioSource Inherited Members Component.Entity Component.Enabled Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public class AudioSource : Component Constructors AudioSource() Declaration public AudioSource()"
  },
  "api/Chroma.BoxCollider.html": {
    "href": "api/Chroma.BoxCollider.html",
    "title": "Class BoxCollider",
    "keywords": "Class BoxCollider 2D Box Collider component. Inheritance System.Object Component BoxCollider Inherited Members Component.Entity Component.Enabled Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public class BoxCollider : Component Constructors BoxCollider() Declaration public BoxCollider()"
  },
  "api/Chroma.Camera.html": {
    "href": "api/Chroma.Camera.html",
    "title": "Class Camera",
    "keywords": "Class Camera Camera component Inheritance System.Object Component Camera Inherited Members Component.Entity Component.Enabled Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public class Camera : Component Constructors Camera() Declaration public Camera()"
  },
  "api/Chroma.CircleCollider.html": {
    "href": "api/Chroma.CircleCollider.html",
    "title": "Class CircleCollider",
    "keywords": "Class CircleCollider Circle collider Inheritance System.Object Component CircleCollider Inherited Members Component.Entity Component.Enabled Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public class CircleCollider : Component Constructors CircleCollider() Declaration public CircleCollider()"
  },
  "api/Chroma.Color.html": {
    "href": "api/Chroma.Color.html",
    "title": "Struct Color",
    "keywords": "Struct Color Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public struct Color"
  },
  "api/Chroma.Component.html": {
    "href": "api/Chroma.Component.html",
    "title": "Class Component",
    "keywords": "Class Component Base component class. Inheritance System.Object Component AudioSource BoxCollider Camera CircleCollider ParticleEmitter SpriteRenderer Transform Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public class Component Properties Enabled Value representing whether the component is enabled. Declaration public bool Enabled { get; set; } Property Value Type Description System.Boolean Entity Reference to the entity containing this component. Declaration public Entity Entity { get; } Property Value Type Description Entity"
  },
  "api/Chroma.Coroutine.CoroutineFunction.html": {
    "href": "api/Chroma.Coroutine.CoroutineFunction.html",
    "title": "Delegate Coroutine.CoroutineFunction",
    "keywords": "Delegate Coroutine.CoroutineFunction Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public delegate IEnumerator CoroutineFunction(); Returns Type Description System.Collections.Generic.IEnumerator"
  },
  "api/Chroma.Coroutine.html": {
    "href": "api/Chroma.Coroutine.html",
    "title": "Class Coroutine",
    "keywords": "Class Coroutine Coroutine based on the IEnumerator system. Inheritance System.Object Coroutine Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public class Coroutine Properties Active Whether the coroutine is active. Declaration public bool Active { get; } Property Value Type Description System.Boolean Finished Whether the coroutine has completed. Independent of Active . Declaration public bool Finished { get; } Property Value Type Description System.Boolean Methods Pause() Pauses the coroutine. Declaration public void Pause() Restart() Restarts the coroutine. Declaration public void Restart() Resume() Resumes the coroutine. Declaration public void Resume() Set(Coroutine.CoroutineFunction) Sets the function which the coroutine executes. Declaration public void Set(Coroutine.CoroutineFunction function) Parameters Type Name Description Coroutine.CoroutineFunction function Function returning an IEnumerator, yield return represent time values in seconds. Start() Starts the coroutine. Declaration public void Start() Stop() Stops the coroutine. Declaration public void Stop()"
  },
  "api/Chroma.Entity.html": {
    "href": "api/Chroma.Entity.html",
    "title": "Class Entity",
    "keywords": "Class Entity Main class for game entities. Inheritance System.Object Entity Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public class Entity Constructors Entity() Declaration protected Entity() Properties ID Numeric ID for the entity. Declaration public ulong ID { get; } Property Value Type Description System.UInt64 Name Name of the entity. Declaration public string Name { get; } Property Value Type Description System.String Methods CreateComponent<T>() Creates a component of the given type and attaches it to this entity. Declaration public T CreateComponent<T>() where T : Component, new() Returns Type Description T Type Parameters Name Description T CreateCoroutine() Creates a coroutine and attaches it to this entity. Declaration public Coroutine CreateCoroutine() Returns Type Description Coroutine CreateCoroutine(Coroutine.CoroutineFunction) Creates a coroutine, sets the function provided, and attaches it to this entity. Declaration public Coroutine CreateCoroutine(Coroutine.CoroutineFunction function) Parameters Type Name Description Coroutine.CoroutineFunction function Function for the coroutine to execute. Returns Type Description Coroutine EarlyStart() Declaration public virtual void EarlyStart() EarlyUpdate() Early-Update function. Called once per frame at the begining of the frame. Declaration public virtual void EarlyUpdate() Finalize() Declaration protected void Finalize() FindEntityByName(String) Gets an entity its name. Returns null if an entity with the given name does not exist. Declaration public static Entity FindEntityByName(string name) Parameters Type Name Description System.String name Returns Type Description Entity GetAbsolutePosition() Calculates the absolute position of an entity. This applies if this entity has a parent. Declaration public Vector2 GetAbsolutePosition() Returns Type Description Vector2 GetChildByName(String) Gets a child of this entity by its name. Returns null if no such child exists. Declaration public Entity GetChildByName(string name) Parameters Type Name Description System.String name Returns Type Description Entity GetChildren() Gets a list of this entities' children. Declaration public List<Entity> GetChildren() Returns Type Description System.Collections.Generic.List < Entity > GetComponent<T>() Gets this entity's component of a specific type. Declaration public T GetComponent<T>() where T : Component, new() Returns Type Description T Returns component of type T , or null if this entity doesn't have a component of type T. Type Parameters Name Description T Type of component. GetFirstChild() Gets the first child of this entity. Returns null if no children exist. Declaration public Entity GetFirstChild() Returns Type Description Entity HasChildren() Checks whether the given entity has children. Declaration public bool HasChildren() Returns Type Description System.Boolean HasComponent(Type) Checks whether this entity has a component of a given type. Declaration public bool HasComponent(Type type) Parameters Type Name Description System.Type type Type of component. Returns Type Description System.Boolean HasComponent<T>() Checks whether this entity has a component of a given type. Declaration public bool HasComponent<T>() where T : Component, new() Returns Type Description System.Boolean Type Parameters Name Description T Type of component. Init() Initialization function. Called directly after PreInit() . Declaration public virtual void Init() LateStart() Declaration public virtual void LateStart() LateUpdate() Late-Update function. Called once per frame, directly after Update() . Declaration public virtual void LateUpdate() NumberChildren() Gets the number of children for this entity. Declaration public uint NumberChildren() Returns Type Description System.UInt32 PostInit() Post-initialization function. Called directly after Init() . Declaration public virtual void PostInit() PreInit() Pre-initialization function. Called before init, after the scene is loaded. Declaration public virtual void PreInit() SetAbsolutePosition(Vector2) Sets an absolute position of an entity. If this entity has a parent, this will set this entity's transform relative to the parent's transform. Declaration public void SetAbsolutePosition(Vector2 position) Parameters Type Name Description Vector2 position Start() Declaration public virtual void Start() Update() Update function. Called once per frame, directly after EarlyUpdate() . Declaration public virtual void Update()"
  },
  "api/Chroma.ExecutionOrder.html": {
    "href": "api/Chroma.ExecutionOrder.html",
    "title": "Class ExecutionOrder",
    "keywords": "Class ExecutionOrder Inheritance System.Object System.Attribute ExecutionOrder Namespace : Chroma Assembly : Chroma.Mono.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)] public class ExecutionOrder : Attribute, _Attribute Constructors ExecutionOrder(Int32) Declaration public ExecutionOrder(int order) Parameters Type Name Description System.Int32 order Properties Order Declaration public int Order { get; } Property Value Type Description System.Int32"
  },
  "api/Chroma.html": {
    "href": "api/Chroma.html",
    "title": "Namespace Chroma",
    "keywords": "Namespace Chroma Classes Audio Audio management class. These set of functions wrap the internal engine audio api and the FMOD api. AudioSource Component to attach a spacial audio source to an entity. BoxCollider 2D Box Collider component. Camera Camera component CircleCollider Circle collider Component Base component class. Coroutine Coroutine based on the IEnumerator system. Entity Main class for game entities. ExecutionOrder Input Log Mathf Float based math class for use in engine. ParticleEmitter Particle Emitter RuntimeException Scene SpriteRenderer Sprite Renderer Component. Controls rendering a sprite for an entity. StateMachine<T> Time Transform Transform component for the entity. The engine enforces the existance of this component for all entities. Structs Color Vector2 2-Component Vector Structure. Vector3 Vector4 Enums Input.ConnectionState Input.Gamepad Input.GamepadAxis Input.GamepadButton Input.JoystickHatState Input.Key Input.Mouse Delegates Coroutine.CoroutineFunction"
  },
  "api/Chroma.Input.ConnectionState.html": {
    "href": "api/Chroma.Input.ConnectionState.html",
    "title": "Enum Input.ConnectionState",
    "keywords": "Enum Input.ConnectionState Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public enum ConnectionState Fields Name Description CONNECTED DISCONNECTED"
  },
  "api/Chroma.Input.Gamepad.html": {
    "href": "api/Chroma.Input.Gamepad.html",
    "title": "Enum Input.Gamepad",
    "keywords": "Enum Input.Gamepad Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public enum Gamepad Fields Name Description _1 _10 _11 _12 _13 _14 _15 _16 _2 _3 _4 _5 _6 _7 _8 _9 _LAST _NULL"
  },
  "api/Chroma.Input.GamepadAxis.html": {
    "href": "api/Chroma.Input.GamepadAxis.html",
    "title": "Enum Input.GamepadAxis",
    "keywords": "Enum Input.GamepadAxis Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public enum GamepadAxis Fields Name Description _LAST LEFT_TRIGGER LEFT_X LEFT_Y RIGHT_TRIGGER RIGHT_X RIGHT_Y"
  },
  "api/Chroma.Input.GamepadButton.html": {
    "href": "api/Chroma.Input.GamepadButton.html",
    "title": "Enum Input.GamepadButton",
    "keywords": "Enum Input.GamepadButton Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public enum GamepadButton Fields Name Description _LAST A B BACK CIRCLE CROSS DPAD_DOWN DPAD_LEFT DPAD_RIGHT DPAD_UP GUIDE LEFT_BUMPER LEFT_THUMB RIGHT_BUMPER RIGHT_THUMB SQUARE START TRIANGLE X Y"
  },
  "api/Chroma.Input.html": {
    "href": "api/Chroma.Input.html",
    "title": "Class Input",
    "keywords": "Class Input Inheritance System.Object Input Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public static class Input Methods GetAllConnectedControllers() Declaration public static List<Input.Gamepad> GetAllConnectedControllers() Returns Type Description System.Collections.Generic.List < Input.Gamepad > GetFirstConnectedGamepad() Declaration public static Input.Gamepad GetFirstConnectedGamepad() Returns Type Description Input.Gamepad GetGamepadAxis() Declaration public static List<float> GetGamepadAxis() Returns Type Description System.Collections.Generic.List < System.Single > GetGamepadAxis(Input.Gamepad) Declaration public static List<float> GetGamepadAxis(Input.Gamepad gamepad) Parameters Type Name Description Input.Gamepad gamepad Returns Type Description System.Collections.Generic.List < System.Single > GetGamepadConnectionState() Declaration public static Input.ConnectionState GetGamepadConnectionState() Returns Type Description Input.ConnectionState GetGamepadConnectionState(Input.Gamepad) Declaration public static Input.ConnectionState GetGamepadConnectionState(Input.Gamepad gamepad) Parameters Type Name Description Input.Gamepad gamepad Returns Type Description Input.ConnectionState GetGamepadName() Declaration public static string GetGamepadName() Returns Type Description System.String GetGamepadName(Input.Gamepad) Declaration public static string GetGamepadName(Input.Gamepad gamepad) Parameters Type Name Description Input.Gamepad gamepad Returns Type Description System.String GetMousePos() Declaration public static Vector2 GetMousePos() Returns Type Description Vector2 GetMouseX() Declaration public static float GetMouseX() Returns Type Description System.Single GetMouseY() Declaration public static float GetMouseY() Returns Type Description System.Single IsJoystickConnected() Declaration public static bool IsJoystickConnected() Returns Type Description System.Boolean IsJoystickConnected(Input.Gamepad) Declaration public static bool IsJoystickConnected(Input.Gamepad gamepad) Parameters Type Name Description Input.Gamepad gamepad Returns Type Description System.Boolean IsPressed(Input.GamepadButton) Declaration public static bool IsPressed(Input.GamepadButton button) Parameters Type Name Description Input.GamepadButton button Returns Type Description System.Boolean IsPressed(Input.GamepadButton, Input.Gamepad) Declaration public static bool IsPressed(Input.GamepadButton button, Input.Gamepad gamepad) Parameters Type Name Description Input.GamepadButton button Input.Gamepad gamepad Returns Type Description System.Boolean IsPressed(Input.Key) Declaration public static bool IsPressed(Input.Key key) Parameters Type Name Description Input.Key key Returns Type Description System.Boolean IsPressed(Input.Mouse) Declaration public static bool IsPressed(Input.Mouse button) Parameters Type Name Description Input.Mouse button Returns Type Description System.Boolean SetGamepadConnectionCallback(Action<Input.Gamepad>) Declaration public static void SetGamepadConnectionCallback(Action<Input.Gamepad> action) Parameters Type Name Description System.Action < Input.Gamepad > action SetGamepadDisconnectionCallback(Action<Input.Gamepad>) Declaration public static void SetGamepadDisconnectionCallback(Action<Input.Gamepad> action) Parameters Type Name Description System.Action < Input.Gamepad > action SetPrimaryGamepad() Declaration public static Input.Gamepad SetPrimaryGamepad() Returns Type Description Input.Gamepad"
  },
  "api/Chroma.Input.JoystickHatState.html": {
    "href": "api/Chroma.Input.JoystickHatState.html",
    "title": "Enum Input.JoystickHatState",
    "keywords": "Enum Input.JoystickHatState Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public enum JoystickHatState Fields Name Description CENTERED DOWN LEFT LEFT_DOWN LEFT_UP RIGHT RIGHT_DOWN RIGHT_UP UP"
  },
  "api/Chroma.Input.Key.html": {
    "href": "api/Chroma.Input.Key.html",
    "title": "Enum Input.Key",
    "keywords": "Enum Input.Key Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public enum Key Fields Name Description _LAST A APOSTROPHE B BACKSLASH BACKSPACE C CAPS_LOCK COMMA D DEL DOWN E END ENTER EQUAL ESCAPE F F1 F10 F11 F12 F13 F14 F15 F16 F17 F18 F19 F2 F20 F21 F22 F23 F24 F25 F3 F4 F5 F6 F7 F8 F9 G GRAVE_ACCENT H HOME I INSERT J K K_0 K_1 K_2 K_3 K_4 K_5 K_6 K_7 K_8 K_9 KP_0 KP_1 KP_2 KP_3 KP_4 KP_5 KP_6 KP_7 KP_8 KP_9 KP_ADD KP_DECIMAL KP_DIVIDE KP_ENTER KP_EQUAL KP_MULTIPLY KP_SUBTRACT L LEFT LEFT_ALT LEFT_BRACKET LEFT_CONTROL LEFT_SHIFT LEFT_SUPER M MENU MINUS N NUM_LOCK O P PAGE_DOWN PAGE_UP PAUSE PERIOD PRINT_SCREEN Q R RIGHT RIGHT_ALT RIGHT_BRACKET RIGHT_CONTROL RIGHT_SHIFT RIGHT_SUPER S SCROLL_LOCK SEMICOLON SLASH SPACE T TAB U UP V W WORLD_1 WORLD_2 X Y Z"
  },
  "api/Chroma.Input.Mouse.html": {
    "href": "api/Chroma.Input.Mouse.html",
    "title": "Enum Input.Mouse",
    "keywords": "Enum Input.Mouse Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public enum Mouse Fields Name Description _LAST BUTTON_1 BUTTON_2 BUTTON_3 BUTTON_4 BUTTON_5 BUTTON_6 BUTTON_7 BUTTON_8 LEFT MIDDLE RIGHT"
  },
  "api/Chroma.Log.html": {
    "href": "api/Chroma.Log.html",
    "title": "Class Log",
    "keywords": "Class Log Inheritance System.Object Log Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public static class Log Methods Critical(Object) Declaration public static void Critical(object value) Parameters Type Name Description System.Object value Critical(String, Object[]) Declaration public static void Critical(string format, params object[] parameters) Parameters Type Name Description System.String format System.Object [] parameters Debug(Object) Declaration public static void Debug(object value) Parameters Type Name Description System.Object value Debug(String, Object[]) Declaration public static void Debug(string format, params object[] parameters) Parameters Type Name Description System.String format System.Object [] parameters Error(Object) Declaration public static void Error(object value) Parameters Type Name Description System.Object value Error(String, Object[]) Declaration public static void Error(string format, params object[] parameters) Parameters Type Name Description System.String format System.Object [] parameters Info(Object) Declaration public static void Info(object value) Parameters Type Name Description System.Object value Info(String, Object[]) Declaration public static void Info(string format, params object[] parameters) Parameters Type Name Description System.String format System.Object [] parameters Trace(Object) Declaration public static void Trace(object value) Parameters Type Name Description System.Object value Trace(String, Object[]) Declaration public static void Trace(string format, params object[] parameters) Parameters Type Name Description System.String format System.Object [] parameters Warn(Object) Declaration public static void Warn(object value) Parameters Type Name Description System.Object value Warn(String, Object[]) Declaration public static void Warn(string format, params object[] parameters) Parameters Type Name Description System.String format System.Object [] parameters WriteLine(Object) Declaration public static void WriteLine(object value) Parameters Type Name Description System.Object value WriteLine(String, Object[]) Declaration public static void WriteLine(string format, params object[] parameters) Parameters Type Name Description System.String format System.Object [] parameters"
  },
  "api/Chroma.Mathf.html": {
    "href": "api/Chroma.Mathf.html",
    "title": "Class Mathf",
    "keywords": "Class Mathf Float based math class for use in engine. Inheritance System.Object Mathf Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public class Mathf Fields E E to a precision of 16 decimal digits. Declaration public const float E = 2.71828175F Field Value Type Description System.Single PI PI to a precision of 16 decimal digits. Declaration public const float PI = 3.14159274F Field Value Type Description System.Single Methods Abs(Single) Declaration public static float Abs(float val) Parameters Type Name Description System.Single val Returns Type Description System.Single Acos(Single) Declaration public static float Acos(float val) Parameters Type Name Description System.Single val Returns Type Description System.Single Atan(Single) Declaration public static float Atan(float val) Parameters Type Name Description System.Single val Returns Type Description System.Single Atan2(Single, Single) Declaration public static float Atan2(float x, float y) Parameters Type Name Description System.Single x System.Single y Returns Type Description System.Single Ceiling(Single) Declaration public static float Ceiling(float val) Parameters Type Name Description System.Single val Returns Type Description System.Single Clamp(Single, Single, Single) Declaration public static float Clamp(float val, float min, float max) Parameters Type Name Description System.Single val System.Single min System.Single max Returns Type Description System.Single Clamp<T>(T, T, T) Declaration public static T Clamp<T>(T val, T min, T max) where T : IComparable<T> Parameters Type Name Description T val T min T max Returns Type Description T Type Parameters Name Description T Cos(Single) Declaration public static float Cos(float val) Parameters Type Name Description System.Single val Returns Type Description System.Single Cosh(Single) Declaration public static float Cosh(float val) Parameters Type Name Description System.Single val Returns Type Description System.Single DegreesToRadians(Single) Declaration public static float DegreesToRadians(float degrees) Parameters Type Name Description System.Single degrees Returns Type Description System.Single Exp(Single) Declaration public static float Exp(float val) Parameters Type Name Description System.Single val Returns Type Description System.Single Floor(Single) Declaration public static float Floor(float val) Parameters Type Name Description System.Single val Returns Type Description System.Single IEEERemainder(Single, Single) Declaration public static float IEEERemainder(float a, float b) Parameters Type Name Description System.Single a System.Single b Returns Type Description System.Single Log(Single) Declaration public static float Log(float val) Parameters Type Name Description System.Single val Returns Type Description System.Single Log(Single, Single) Declaration public static float Log(float val, float new_base) Parameters Type Name Description System.Single val System.Single new_base Returns Type Description System.Single Log10(Single) Declaration public static float Log10(float val) Parameters Type Name Description System.Single val Returns Type Description System.Single Max(Byte, Byte) Declaration public static byte Max(byte a, byte b) Parameters Type Name Description System.Byte a System.Byte b Returns Type Description System.Byte Max(Decimal, Decimal) Declaration public static decimal Max(decimal a, decimal b) Parameters Type Name Description System.Decimal a System.Decimal b Returns Type Description System.Decimal Max(Double, Double) Declaration public static double Max(double a, double b) Parameters Type Name Description System.Double a System.Double b Returns Type Description System.Double Max(Int16, Int16) Declaration public static short Max(short a, short b) Parameters Type Name Description System.Int16 a System.Int16 b Returns Type Description System.Int16 Max(Int32, Int32) Declaration public static int Max(int a, int b) Parameters Type Name Description System.Int32 a System.Int32 b Returns Type Description System.Int32 Max(Int64, Int64) Declaration public static long Max(long a, long b) Parameters Type Name Description System.Int64 a System.Int64 b Returns Type Description System.Int64 Max(SByte, SByte) Declaration public static sbyte Max(sbyte a, sbyte b) Parameters Type Name Description System.SByte a System.SByte b Returns Type Description System.SByte Max(Single, Single) Declaration public static float Max(float a, float b) Parameters Type Name Description System.Single a System.Single b Returns Type Description System.Single Max(UInt16, UInt16) Declaration public static ushort Max(ushort a, ushort b) Parameters Type Name Description System.UInt16 a System.UInt16 b Returns Type Description System.UInt16 Max(UInt32, UInt32) Declaration public static uint Max(uint a, uint b) Parameters Type Name Description System.UInt32 a System.UInt32 b Returns Type Description System.UInt32 Max(UInt64, UInt64) Declaration public static ulong Max(ulong a, ulong b) Parameters Type Name Description System.UInt64 a System.UInt64 b Returns Type Description System.UInt64 Min(Byte, Byte) Declaration public static byte Min(byte a, byte b) Parameters Type Name Description System.Byte a System.Byte b Returns Type Description System.Byte Min(Decimal, Decimal) Declaration public static decimal Min(decimal a, decimal b) Parameters Type Name Description System.Decimal a System.Decimal b Returns Type Description System.Decimal Min(Double, Double) Declaration public static double Min(double a, double b) Parameters Type Name Description System.Double a System.Double b Returns Type Description System.Double Min(Int16, Int16) Declaration public static short Min(short a, short b) Parameters Type Name Description System.Int16 a System.Int16 b Returns Type Description System.Int16 Min(Int32, Int32) Declaration public static int Min(int a, int b) Parameters Type Name Description System.Int32 a System.Int32 b Returns Type Description System.Int32 Min(Int64, Int64) Declaration public static long Min(long a, long b) Parameters Type Name Description System.Int64 a System.Int64 b Returns Type Description System.Int64 Min(SByte, SByte) Declaration public static sbyte Min(sbyte a, sbyte b) Parameters Type Name Description System.SByte a System.SByte b Returns Type Description System.SByte Min(Single, Single) Declaration public static float Min(float a, float b) Parameters Type Name Description System.Single a System.Single b Returns Type Description System.Single Min(UInt16, UInt16) Declaration public static ushort Min(ushort a, ushort b) Parameters Type Name Description System.UInt16 a System.UInt16 b Returns Type Description System.UInt16 Min(UInt32, UInt32) Declaration public static uint Min(uint a, uint b) Parameters Type Name Description System.UInt32 a System.UInt32 b Returns Type Description System.UInt32 Min(UInt64, UInt64) Declaration public static ulong Min(ulong a, ulong b) Parameters Type Name Description System.UInt64 a System.UInt64 b Returns Type Description System.UInt64 Pow(Single, Single) Declaration public static float Pow(float a, float b) Parameters Type Name Description System.Single a System.Single b Returns Type Description System.Single RadiansToDegrees(Single) Declaration public static float RadiansToDegrees(float radians) Parameters Type Name Description System.Single radians Returns Type Description System.Single Round(Single) Declaration public static float Round(float val) Parameters Type Name Description System.Single val Returns Type Description System.Single Round(Single, Int32) Declaration public static float Round(float val, int rounding) Parameters Type Name Description System.Single val System.Int32 rounding Returns Type Description System.Single Sign(Decimal) Declaration public static int Sign(decimal val) Parameters Type Name Description System.Decimal val Returns Type Description System.Int32 Sign(Double) Declaration public static int Sign(double val) Parameters Type Name Description System.Double val Returns Type Description System.Int32 Sign(Int16) Declaration public static int Sign(short val) Parameters Type Name Description System.Int16 val Returns Type Description System.Int32 Sign(Int32) Declaration public static int Sign(int val) Parameters Type Name Description System.Int32 val Returns Type Description System.Int32 Sign(Int64) Declaration public static int Sign(long val) Parameters Type Name Description System.Int64 val Returns Type Description System.Int32 Sign(SByte) Declaration public static int Sign(sbyte val) Parameters Type Name Description System.SByte val Returns Type Description System.Int32 Sign(Single) Declaration public static int Sign(float val) Parameters Type Name Description System.Single val Returns Type Description System.Int32 Sin(Single) Declaration public static float Sin(float val) Parameters Type Name Description System.Single val Returns Type Description System.Single Sinh(Single) Declaration public static float Sinh(float val) Parameters Type Name Description System.Single val Returns Type Description System.Single Sqrt(Single) Declaration public static float Sqrt(float val) Parameters Type Name Description System.Single val Returns Type Description System.Single Square(Single) Declaration public static float Square(float val) Parameters Type Name Description System.Single val Returns Type Description System.Single Tan(Single) Declaration public static float Tan(float val) Parameters Type Name Description System.Single val Returns Type Description System.Single Tanh(Single) Declaration public static float Tanh(float val) Parameters Type Name Description System.Single val Returns Type Description System.Single Truncate(Single) Declaration public static float Truncate(float val) Parameters Type Name Description System.Single val Returns Type Description System.Single"
  },
  "api/Chroma.ParticleEmitter.html": {
    "href": "api/Chroma.ParticleEmitter.html",
    "title": "Class ParticleEmitter",
    "keywords": "Class ParticleEmitter Particle Emitter Inheritance System.Object Component ParticleEmitter Inherited Members Component.Entity Component.Enabled Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public class ParticleEmitter : Component"
  },
  "api/Chroma.RuntimeException.html": {
    "href": "api/Chroma.RuntimeException.html",
    "title": "Class RuntimeException",
    "keywords": "Class RuntimeException Inheritance System.Object RuntimeException Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public class RuntimeException Methods OnException(Object) Declaration public static void OnException(object exception) Parameters Type Name Description System.Object exception"
  },
  "api/Chroma.Scene.html": {
    "href": "api/Chroma.Scene.html",
    "title": "Class Scene",
    "keywords": "Class Scene Inheritance System.Object Scene Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public static class Scene"
  },
  "api/Chroma.SpriteRenderer.html": {
    "href": "api/Chroma.SpriteRenderer.html",
    "title": "Class SpriteRenderer",
    "keywords": "Class SpriteRenderer Sprite Renderer Component. Controls rendering a sprite for an entity. Inheritance System.Object Component SpriteRenderer Inherited Members Component.Entity Component.Enabled Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public class SpriteRenderer : Component Properties Animation Set sprite animation by index. Index will be bounded by number of animations the sprite contains. Only applies to animated sprites. Declaration public uint Animation { get; set; } Property Value Type Description System.UInt32 Color Color of the sprite. Default is white. Declaration public Vector4 Color { get; set; } Property Value Type Description Vector4 Remarks Color is multiplicatively blended with the texture in the fragment shader. Frame The current frame of the animated sprite. This frame is independent of the selected animation (ie spans frames of all animations). Only applies to animated sprites. Declaration public uint Frame { get; set; } Property Value Type Description System.UInt32 Layer [DEPRICATED] Layer of the sprite. Declaration public string Layer { get; set; } Property Value Type Description System.String Loop Whether the sprite animation should loop. If false, the animation will stop when it hits the last frame. Only applies if the sprite is animated. Declaration public bool Loop { get; set; } Property Value Type Description System.Boolean Offset Offset of the sprite. By default the sprite renders starting at the entity's transform position. The offset is added to the transform. Declaration public Vector2 Offset { get; set; } Property Value Type Description Vector2 Playing Bool representing whether the sprite is playing. Only applies if the sprite is animated. Declaration public bool Playing { get; set; } Property Value Type Description System.Boolean PlayOnStart Whether the sprite should begin playing at the start of the scene. If not, setting Playing to true will begin the sprite's animation. Only applies if the sprite is animated. Declaration public bool PlayOnStart { get; set; } Property Value Type Description System.Boolean Speed Speed multiplier of the sprite. Default is 1.0. Only applies if the sprite is animated. Declaration public float Speed { get; set; } Property Value Type Description System.Single SpriteID Sprite to render. Setting this to an ID of a sprite that does not exist will result in a warning. Declaration public string SpriteID { get; set; } Property Value Type Description System.String Methods GetAnimationTag() Gets the current animation's tag. Declaration public string GetAnimationTag() Returns Type Description System.String Name/Tag of the current animation GetAnimationTag(UInt32) Gets the name of the animation from the numerical ID. Declaration public string GetAnimationTag(uint animation) Parameters Type Name Description System.UInt32 animation Numerical ID of the animation Returns Type Description System.String Name of the animation. RestartAnimation() Restarts the current animation. Declaration public void RestartAnimation() SetAnimationByTag(String) Sets the sprite animation by the animation's tag. Declaration public void SetAnimationByTag(string tag) Parameters Type Name Description System.String tag Name of the sprite's animation. This is case sensitive."
  },
  "api/Chroma.StateMachine-1.html": {
    "href": "api/Chroma.StateMachine-1.html",
    "title": "Class StateMachine<T>",
    "keywords": "Class StateMachine<T> Inheritance System.Object StateMachine<T> Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public class StateMachine<T> where T : struct, IConvertible Type Parameters Name Description T Constructors StateMachine(T) Declaration public StateMachine(T initial_state) Parameters Type Name Description T initial_state Properties Current Declaration public T Current { get; } Property Value Type Description T Methods Add(T, Action, Coroutine.CoroutineFunction, Action, Action) Declaration public void Add(T state, Action update, Coroutine.CoroutineFunction coroutine = null, Action begin = null, Action end = null) Parameters Type Name Description T state System.Action update Coroutine.CoroutineFunction coroutine System.Action begin System.Action end Set(T) Declaration public void Set(T state) Parameters Type Name Description T state Update() Declaration public void Update()"
  },
  "api/Chroma.Time.html": {
    "href": "api/Chroma.Time.html",
    "title": "Class Time",
    "keywords": "Class Time Inheritance System.Object Time Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public static class Time Properties Delta Declaration public static double Delta { get; } Property Value Type Description System.Double DeltaF Declaration public static float DeltaF { get; } Property Value Type Description System.Single"
  },
  "api/Chroma.Transform.html": {
    "href": "api/Chroma.Transform.html",
    "title": "Class Transform",
    "keywords": "Class Transform Transform component for the entity. The engine enforces the existance of this component for all entities. Inheritance System.Object Component Transform Inherited Members Component.Entity Component.Enabled Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public class Transform : Component Properties Position Positional component for the transform. Represents the position of the entity in the scene. Declaration public Vector2 Position { get; set; } Property Value Type Description Vector2 RadRotation Rotational component for the transform in radians. Use Rotation for accessing rotation in degrees. Declaration public float RadRotation { get; set; } Property Value Type Description System.Single Rotation Rotational component for the transform. Represents the euler angle in degrees of the entity. Rotation is internally stored in radians and is converted in this geter/setter. Use RadRotation for accessing the rotation in radians. Declaration public float Rotation { get; set; } Property Value Type Description System.Single Scale Scale component of the transform. Declaration public Vector2 Scale { get; set; } Property Value Type Description Vector2 Methods ToString() Gets the transform component as a string. Declaration public override string ToString() Returns Type Description System.String Formatted string containing transform data. Overrides System.Object.ToString()"
  },
  "api/Chroma.Vector2.html": {
    "href": "api/Chroma.Vector2.html",
    "title": "Struct Vector2",
    "keywords": "Struct Vector2 2-Component Vector Structure. Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public struct Vector2 : IEquatable<Vector2> Constructors Vector2(Single) Constructs a new vector with an initial scalar (sets x and y to scalar). Declaration public Vector2(float scalar) Parameters Type Name Description System.Single scalar Vector2(Single, Single) Constructs a new vector with intial values. Declaration public Vector2(float x, float y) Parameters Type Name Description System.Single x System.Single y Fields Down Declaration public static Vector2 Down Field Value Type Description Vector2 Left Declaration public static Vector2 Left Field Value Type Description Vector2 One Declaration public static Vector2 One Field Value Type Description Vector2 Right Declaration public static Vector2 Right Field Value Type Description Vector2 Up Declaration public static Vector2 Up Field Value Type Description Vector2 X X component of the vector. Declaration public float X Field Value Type Description System.Single Y Y component of the vector. Declaration public float Y Field Value Type Description System.Single Zero Declaration public static Vector2 Zero Field Value Type Description Vector2 Methods Angle(Vector2, Vector2) Calculates the angle between two vectors. Declaration public static float Angle(Vector2 a, Vector2 b) Parameters Type Name Description Vector2 a Vector2 b Returns Type Description System.Single Clamp(Vector2, Vector2) Clamps the this vector between two vectors. The function performes a component-wise clamp, meaning clamping each component is done independently. Declaration public void Clamp(Vector2 min, Vector2 max) Parameters Type Name Description Vector2 min Vector2 max Cos(Vector2) Computes the cosine of a vector, component-wise. Declaration public static Vector2 Cos(Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description Vector2 Distance(Vector2) Calculates the distance between this and another vector. Declaration public float Distance(Vector2 other) Parameters Type Name Description Vector2 other Other vector to calculate distance. Returns Type Description System.Single Distance between this and other. Distance(Vector2, Vector2) Calculates the distance between two vectors. Declaration public static float Distance(Vector2 first, Vector2 second) Parameters Type Name Description Vector2 first Vector2 second Returns Type Description System.Single Distance between the two vectors. Dot(Vector2, Vector2) Calculates the dot product between two vectors. Declaration public static float Dot(Vector2 a, Vector2 b) Parameters Type Name Description Vector2 a Vector2 b Returns Type Description System.Single Equals(Vector2) Calculates equality between two vectors. Declaration public bool Equals(Vector2 right) Parameters Type Name Description Vector2 right Returns Type Description System.Boolean Equals(Object) Calculates equality between two vectors. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) GetHashCode() Computes the hash code of the vector. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Length() Calculates the length of the vector. Declaration public float Length() Returns Type Description System.Single Lerp(Vector2, Vector2, Single) Linear interpolation between two vectors. Declaration public static Vector2 Lerp(Vector2 from, Vector2 to, float delta) Parameters Type Name Description Vector2 from Starting vector Vector2 to Ending vector System.Single delta Delta time Returns Type Description Vector2 Normalize() Normalizes this vector. Declaration public void Normalize() Normalized() Returns a normalized version of this vector. Note: This does not normalize this vector, but rather returns a copy which is normalized. See Normalize to normalize this vector. Declaration public Vector2 Normalized() Returns Type Description Vector2 Sin(Vector2) Computes the sine of a vector, component-wise. Declaration public static Vector2 Sin(Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description Vector2 ToString() Creates a formatted string containing the components of the vector. Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators Addition(Vector2, Vector2) Addition of two vectors. Declaration public static Vector2 operator +(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left Vector2 right Returns Type Description Vector2 Addition(Vector2, Single) Component-wise addition of a value to a vector. Declaration public static Vector2 operator +(Vector2 left, float right) Parameters Type Name Description Vector2 left System.Single right Returns Type Description Vector2 Division(Vector2, Vector2) Division of two vectors. Declaration public static Vector2 operator /(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left Vector2 right Returns Type Description Vector2 Division(Vector2, Single) Division of a vector by a scalar. Declaration public static Vector2 operator /(Vector2 left, float scalar) Parameters Type Name Description Vector2 left System.Single scalar Returns Type Description Vector2 Equality(Vector2, Vector2) Calculates equality between two vectors. Declaration public static bool operator ==(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left Vector2 right Returns Type Description System.Boolean Inequality(Vector2, Vector2) Calculates non-equality between two vectors. Declaration public static bool operator !=(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left Vector2 right Returns Type Description System.Boolean Multiply(Vector2, Vector2) Multipication of two vectors. Declaration public static Vector2 operator *(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left Vector2 right Returns Type Description Vector2 Multiply(Vector2, Single) Multiplication by scalar. Declaration public static Vector2 operator *(Vector2 left, float scalar) Parameters Type Name Description Vector2 left System.Single scalar Returns Type Description Vector2 Multiply(Single, Vector2) Multipication by scalar. Declaration public static Vector2 operator *(float scalar, Vector2 right) Parameters Type Name Description System.Single scalar Vector2 right Returns Type Description Vector2 Subtraction(Vector2, Vector2) Subtraction of two vectors. Declaration public static Vector2 operator -(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left Vector2 right Returns Type Description Vector2 UnaryNegation(Vector2) Negation of a vector. Declaration public static Vector2 operator -(Vector2 vector) Parameters Type Name Description Vector2 vector Returns Type Description Vector2"
  },
  "api/Chroma.Vector3.html": {
    "href": "api/Chroma.Vector3.html",
    "title": "Struct Vector3",
    "keywords": "Struct Vector3 Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public struct Vector3 : IEquatable<Vector3> Constructors Vector3(Vector2) Declaration public Vector3(Vector2 xy) Parameters Type Name Description Vector2 xy Vector3(Vector2, Single) Declaration public Vector3(Vector2 xy, float z) Parameters Type Name Description Vector2 xy System.Single z Vector3(Vector4) Declaration public Vector3(Vector4 vec) Parameters Type Name Description Vector4 vec Vector3(Single) Declaration public Vector3(float scalar) Parameters Type Name Description System.Single scalar Vector3(Single, Single) Declaration public Vector3(float x, float y) Parameters Type Name Description System.Single x System.Single y Vector3(Single, Single, Single) Declaration public Vector3(float x, float y, float z) Parameters Type Name Description System.Single x System.Single y System.Single z Fields Down Declaration public static Vector3 Down Field Value Type Description Vector3 Forward Declaration public static Vector3 Forward Field Value Type Description Vector3 One Declaration public static Vector3 One Field Value Type Description Vector3 Right Declaration public static Vector3 Right Field Value Type Description Vector3 Up Declaration public static Vector3 Up Field Value Type Description Vector3 X Declaration public float X Field Value Type Description System.Single Y Declaration public float Y Field Value Type Description System.Single Z Declaration public float Z Field Value Type Description System.Single Zero Declaration public static Vector3 Zero Field Value Type Description Vector3 Properties XY Declaration public Vector2 XY { get; set; } Property Value Type Description Vector2 XZ Declaration public Vector2 XZ { get; set; } Property Value Type Description Vector2 YZ Declaration public Vector2 YZ { get; set; } Property Value Type Description Vector2 Methods Clamp(Vector3, Vector3) Declaration public void Clamp(Vector3 min, Vector3 max) Parameters Type Name Description Vector3 min Vector3 max Cos(Vector3) Declaration public static Vector3 Cos(Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector3 Distance(Vector3) Declaration public float Distance(Vector3 other) Parameters Type Name Description Vector3 other Returns Type Description System.Single Distance(Vector3, Vector3) Declaration public static float Distance(Vector3 first, Vector3 second) Parameters Type Name Description Vector3 first Vector3 second Returns Type Description System.Single Equals(Vector3) Declaration public bool Equals(Vector3 right) Parameters Type Name Description Vector3 right Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Length() Declaration public float Length() Returns Type Description System.Single Lerp(Vector3, Vector3, Single) Declaration public static Vector3 Lerp(Vector3 from, Vector3 to, float delta) Parameters Type Name Description Vector3 from Vector3 to System.Single delta Returns Type Description Vector3 Normalize() Declaration public void Normalize() Normalized() Declaration public Vector3 Normalized() Returns Type Description Vector3 Sin(Vector3) Declaration public static Vector3 Sin(Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector3 ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators Addition(Vector3, Vector3) Declaration public static Vector3 operator +(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left Vector3 right Returns Type Description Vector3 Addition(Vector3, Single) Declaration public static Vector3 operator +(Vector3 left, float right) Parameters Type Name Description Vector3 left System.Single right Returns Type Description Vector3 Division(Vector3, Vector3) Declaration public static Vector3 operator /(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left Vector3 right Returns Type Description Vector3 Division(Vector3, Single) Declaration public static Vector3 operator /(Vector3 left, float scalar) Parameters Type Name Description Vector3 left System.Single scalar Returns Type Description Vector3 Equality(Vector3, Vector3) Declaration public static bool operator ==(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left Vector3 right Returns Type Description System.Boolean Inequality(Vector3, Vector3) Declaration public static bool operator !=(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left Vector3 right Returns Type Description System.Boolean Multiply(Vector3, Vector3) Declaration public static Vector3 operator *(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left Vector3 right Returns Type Description Vector3 Multiply(Vector3, Single) Declaration public static Vector3 operator *(Vector3 left, float scalar) Parameters Type Name Description Vector3 left System.Single scalar Returns Type Description Vector3 Multiply(Single, Vector3) Declaration public static Vector3 operator *(float scalar, Vector3 right) Parameters Type Name Description System.Single scalar Vector3 right Returns Type Description Vector3 Subtraction(Vector3, Vector3) Declaration public static Vector3 operator -(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left Vector3 right Returns Type Description Vector3 UnaryNegation(Vector3) Declaration public static Vector3 operator -(Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector3"
  },
  "api/Chroma.Vector4.html": {
    "href": "api/Chroma.Vector4.html",
    "title": "Struct Vector4",
    "keywords": "Struct Vector4 Namespace : Chroma Assembly : Chroma.Mono.dll Syntax public struct Vector4 : IEquatable<Vector4> Constructors Vector4(Vector2) Declaration public Vector4(Vector2 vec) Parameters Type Name Description Vector2 vec Vector4(Vector2, Single, Single) Declaration public Vector4(Vector2 vec, float z, float w) Parameters Type Name Description Vector2 vec System.Single z System.Single w Vector4(Vector3) Declaration public Vector4(Vector3 vec) Parameters Type Name Description Vector3 vec Vector4(Vector3, Single) Declaration public Vector4(Vector3 vec, float w) Parameters Type Name Description Vector3 vec System.Single w Vector4(Single) Declaration public Vector4(float scalar) Parameters Type Name Description System.Single scalar Vector4(Single, Single, Single, Single) Declaration public Vector4(float x, float y, float z, float w) Parameters Type Name Description System.Single x System.Single y System.Single z System.Single w Fields One Declaration public static Vector4 One Field Value Type Description Vector4 W Declaration public float W Field Value Type Description System.Single X Declaration public float X Field Value Type Description System.Single Y Declaration public float Y Field Value Type Description System.Single Z Declaration public float Z Field Value Type Description System.Single Zero Declaration public static Vector4 Zero Field Value Type Description Vector4 Methods Clamp(Vector4, Vector4) Declaration public void Clamp(Vector4 min, Vector4 max) Parameters Type Name Description Vector4 min Vector4 max Cos(Vector4) Declaration public static Vector4 Cos(Vector4 vector) Parameters Type Name Description Vector4 vector Returns Type Description Vector4 Distance(Vector4) Declaration public float Distance(Vector4 other) Parameters Type Name Description Vector4 other Returns Type Description System.Single Distance(Vector4, Vector4) Declaration public static float Distance(Vector4 first, Vector4 second) Parameters Type Name Description Vector4 first Vector4 second Returns Type Description System.Single Equals(Vector4) Declaration public bool Equals(Vector4 right) Parameters Type Name Description Vector4 right Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Length() Declaration public float Length() Returns Type Description System.Single Lerp(Vector4, Vector4, Single) Declaration public static Vector4 Lerp(Vector4 from, Vector4 to, float t) Parameters Type Name Description Vector4 from Vector4 to System.Single t Returns Type Description Vector4 Normalize() Declaration public void Normalize() Normalized() Declaration public Vector4 Normalized() Returns Type Description Vector4 Sin(Vector4) Declaration public static Vector4 Sin(Vector4 vector) Parameters Type Name Description Vector4 vector Returns Type Description Vector4 ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators Addition(Vector4, Vector4) Declaration public static Vector4 operator +(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left Vector4 right Returns Type Description Vector4 Addition(Vector4, Single) Declaration public static Vector4 operator +(Vector4 left, float right) Parameters Type Name Description Vector4 left System.Single right Returns Type Description Vector4 Division(Vector4, Vector4) Declaration public static Vector4 operator /(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left Vector4 right Returns Type Description Vector4 Division(Vector4, Single) Declaration public static Vector4 operator /(Vector4 left, float scalar) Parameters Type Name Description Vector4 left System.Single scalar Returns Type Description Vector4 Equality(Vector4, Vector4) Declaration public static bool operator ==(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left Vector4 right Returns Type Description System.Boolean Inequality(Vector4, Vector4) Declaration public static bool operator !=(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left Vector4 right Returns Type Description System.Boolean Multiply(Vector4, Vector4) Declaration public static Vector4 operator *(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left Vector4 right Returns Type Description Vector4 Multiply(Vector4, Single) Declaration public static Vector4 operator *(Vector4 left, float scalar) Parameters Type Name Description Vector4 left System.Single scalar Returns Type Description Vector4 Multiply(Single, Vector4) Declaration public static Vector4 operator *(float scalar, Vector4 right) Parameters Type Name Description System.Single scalar Vector4 right Returns Type Description Vector4 Subtraction(Vector4, Vector4) Declaration public static Vector4 operator -(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left Vector4 right Returns Type Description Vector4 UnaryNegation(Vector4) Declaration public static Vector4 operator -(Vector4 vector) Parameters Type Name Description Vector4 vector Returns Type Description Vector4"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Chroma API",
    "keywords": "Chroma API Welcome to the Chroma API Documentation. The Chroma Engine features a full C# API system, which may be referenced here. using System.Collections; using Chroma; namespace MyGame { //All game objects by default extend the Entity class. //The entity class provides methods for accessing object data, components, and behavior. public class MyEnemy : Entity { //Public fields will be visible within the editor. public float Speed = 10.0f; //Private references private Transform _transform; private SpriteRenderer _spriteRenderer; //This function will be called at the beginning of the Scene. public override void Init() { //This will write a string to the console. Log.Info(\"I am a flea\"); //This retrieves a reference to this Entity's Transform Component. //It is recommended to retrieve components during initialization instead of runtime. _transform = GetComponent<Transform>(); } //This function will run once per frame, at a variable rate. public override void Update() { //Here we modify the position to move the enemy to the right. //Note we use Time.DeltaF here to take into account the time since the last frame occurred. _transform.Position = _transform.Position + new Vector2(1, 0) * Speed * Time.DeltaF; Log.Info(\"My position is {0}\", _transform.Position); } } }"
  },
  "articles/creating_a_project.html": {
    "href": "articles/creating_a_project.html",
    "title": "Creating a Project",
    "keywords": "Creating a Project Once you launch Polychrome.exe , you should see the launcher: The launcher shows a list of all existing projects on your system. By default the list should be empty. To create a new project, click Create a new project . Fill in the details and click Create . From here the new project should load, and you should see the main editor window."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Introduction",
    "keywords": "Introduction Welcome to the documentation page for the Chroma Engine. While the engine is still in its early stages of development, I felt it was pertinent to provide some baseline information on how the engine works and how to use it. Hopefully the provided material here will help someone wishing to give it a try the tools to create something. This is not a tutorial on game development or programming, this is only designed to get one familiar with the tools provided by the engine, and reference material for the scripting language. These documents are subject to constant change, as the state of the engine is currently in flux. The engine is subject to breaking changes to its tools, API, and systems. So use at your own risk ."
  },
  "articles/setting_up.html": {
    "href": "articles/setting_up.html",
    "title": "Setting Up",
    "keywords": "Setting Up As of current, the engine is deployed on github, and supports windows only. The latest version of the engine is found here: https://github.com/ttalexander2/chroma/releases System Requirements OS: Windows 7 or newer. CPU: 64-bit processor. Quad-core or better recommended. RAM: Minimum 4GB of ram. 16GB is recommended. GPU: Any GPU with OpenGL 4.6 and Vulkan 1.2 support. Prerequisites Microsoft Visual C++ 2019 Redistributable/Runtime Currently the engine does not provide the C++ runtime required for execution of the engine or applications deployed from the engine. It can either be installed as a part the Visual C++ development tools as a part of a Visual Studio installation, or from a redistributable package found here . Installation Download the application from the github page here . Extract the engine to your preferred directory. The engine does not yet include an installer, so managing the application location and version is up to you. Optionally, install VSCode . The engine features VSCode integration by default. Launch Polychrome.exe to get started! Building from source If you would prefer, you may build the engine from source. Requires C++20, Visual Studio 2019, C++ Python 3.3+, and Mono All other dependencies are either included within the project, or provided as github submodules. Instructions git clone --recurse-submodules -j8 https://github.com/ttalexander2/chroma.git Execute Setup.bat to install prerequisites and build the VS Solution. This will check for python versions, as well as install the VulkanSDK. Follow instructions to install prerequisits and verify requirements. Open Solution File. Select Build > Build Solution. Please note, if you experience an error, try building the Chroma.Mono project first."
  },
  "articles/vscode_extension.html": {
    "href": "articles/vscode_extension.html",
    "title": "VSCode Extension",
    "keywords": "VSCode Extension The engine comes with a simple VSCode extension for making development in the Chroma Engine and Polychrome Editor a little easier. Installation Requires VSCode to be installed In the Polychrome Editor, click Options > Install VSCode Extension . Note: If this option does not exist, the engine could not detect VSCode in the PATH. Either add to the path, or reinstall. Features Asset Code Lens This allows the user to view the name/path of the asset when referencing a GUID. Clicking on the path will highlight it in the VSCode Explorer. Asset GUID Completion Typing the @ character will provide asset path completion suggestions. Hitting Enter will substitute the selected path with it's GUID."
  },
  "index.html": {
    "href": "index.html",
    "title": "Chroma Engine",
    "keywords": "Chroma Engine A small C++ Game Engine and Editor, designed in order to providing simple tools for creating games in 2D. It was started as a way to learn more about game technology, computer graphics and game engine design. It takes ideas and inspiration from other open-source engines, and is designed to be lightweight and easily modifiable. At the moment, only Windows building is supported. Support for other platforms will be implemented at a later date. This project is a work-in-progress, and will likely see breaking changes! Use at your own risk! Prerequisites Visual C++ Redistributable 2019 Building Windows Requires C++20, Visual Studio 2019, C++ Python 3.3+, and Mono All other dependencies are either included within the project, or provided as github submodules. Instructions git clone --recurse-submodules -j8 https://github.com/ttalexander2/chroma.git Execute Setup.bat to install prerequisites and build the VS Solution. This will check for python versions, as well as install the VulkanSDK. Follow instructions to install prerequisits and verify requirements. Open Solution File. Select Build > Build Solution. Please note, Chroma.Mono must be built first in order for Polychrome to function. Mac & Linux Currently does not support building on mac/linux, but support is on the way! Notes Currently single threaded, plans for a multi-threaded renderer in the future. Audio is implemented using FMOD Studio, plans for a non-fmod audio backend will be implemted in the future. Only OpenGL renderer is implemented, a Vulkan backend is currently in the works. Documentation Please see the Documentation Page for more information and resources."
  }
}